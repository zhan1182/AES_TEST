// $Id: $
// File name:   sram_controller.sv
// Created:     4/16/2015
// Author:      Xinjie Lei
// Lab Section: 337-05
// Version:     1.0  Initial Design Entry
// Description: SRAM controller
module sram1_controller
  {
   input wire clk,
   input wire n_rst,
   input wire enable,
   input wire en_or_de,
   input wire write_done,
   input wire decrpytion_flag,
   input wire [2:0] loc1,
   input wire [7:0] start_address1,
   input wire [127:0] write_data,
   output wire de_finished,
   output wire en_finished,
   output wire read_done,
   output wire [127:0] read_data
   };

   on_chip_sram_wrapper SRAM1(.init_file_number(0),.dump_file_number(0),.mem_clr(mem_clr),.mem_init(mem_init),.mem_dump(mem_dump),.verbose(1'b0),
.start_address(START_ADDR),.last_address(LAST_ADDR),.read_enable(r_en),.write_enable(w_en),.address(address),.read_data(read_data_half),.write_data(write_data_half));

   assign read_enable = (en_or_de == 0) ? (enable && !read_done) &&  : 0;
   assign write_enable = (en_or_de == 1) ? (enable && !write_done && decrption_flag) : 0;
   assign de_finished = write_done;
   
   address_counter #(.NUM_CNT_BITS(5)) counter(.clk(clk), .n_rst(n_rst), .count_enable(read_enable), .rollover_val(loc1),.start_address(start_address1) .count_out(sram1_address), .rollover_flag(read_done));

endmodule