// $Id: $
// File name:   tb_AES_Chip.sv
// Created:     4/21/2015
// Author:      Xinjie Lei
// Lab Section: 337-05
// Version:     1.0  Initial Design Entry
// Description: top test bench
`timescale 1ns / 100ps
module tb_AES_Chip();
   // SRAM configuation parameters (based on values set in wrapper file)
   localparam TB_ADDR_SIZE_BITS	= 8; 	
   localparam TB_DATA_SIZE_WORDS	= 8;	
   localparam TB_WORD_SIZE_BYTES	= 2;
   localparam TB_ACCES_SIZE_BITS	= (TB_DATA_SIZE_WORDS * TB_WORD_SIZE_BYTES * 8);
   localparam CLK_PERIOD	= 12.5;
   // Useful test bench constants
   localparam DATA_BUS_FLOAT = 128'b1;
   
   // Test bench signals for AES
   integer unsigned tb_init_file_number;	
   
   reg 	   tb_mem_clr;	
   reg 	   tb_mem_init;
   reg 	   tb_mem_dump; 
   reg 	   tb_r_en;	
   reg 	   tb_w_en;  
   reg [(TB_ACCES_SIZE_BITS - 1):0] tb_r_data; 		// The address of the first word in the access
   reg [(TB_ACCES_SIZE_BITS - 1):0] tb_w_data; 		// The address of the first word in the access
   reg [(TB_ADDR_SIZE_BITS - 1):0] tb_r_addr; 		// The address of the first word in the access
   reg [(TB_ADDR_SIZE_BITS - 1):0] tb_w_addr; 		// The address of the first word in the access
   wire [(TB_ACCES_SIZE_BITS - 1):0] tb_bidir_data1;	// The data read from the SRAM
   wire [(TB_ACCES_SIZE_BITS - 1):0] tb_bidir_data2;	// The data to be written to the SRAM
   
   //Test bench signal for AES Chip
   reg 				     tb_SCK;
   reg 				     tb_n_rst;
   reg 				     tb_start;
   reg 				     tb_rec_fin;
   reg [(TB_ACCES_SIZE_BITS - 1):0]   tb_usr_key;
   reg [(TB_ADDR_SIZE_BITS - 1):0]   tb_usr_addr;
   reg [(TB_ADDR_SIZE_BITS - 1):0]   tb_usr_loc;     
   reg 				     tb_mode;
   reg 				     tb_done;
   
   //separate data bus
   assign tb_r_data		= (tb_r_en == 1) ? tb_bidir_data1 : DATA_BUS_FLOAT;
   assign tb_bidir_data2	= (tb_w_en == 1) ? tb_w_data : DATA_BUS_FLOAT;
  
   // Wrapper portmap
   off_chip_sram_wrapper DUT_SRAM1
     (
      // Test bench control signals
      .mem_clr(tb_mem_clr),
      .mem_init(tb_mem_init),
      .mem_dump(),
      .verbose(),
      .init_file_number(0),
      .dump_file_number(),
      .start_address(),
      .last_address(),
      // Memory interface signals
      .read_enable(tb_r_en),
      .write_enable(),
      .address(tb_r_addr),
      .data(tb_bidir_data1)
      );
   
   off_chip_sram_wrapper DUT_SRAM2
     (
      // Test bench control signals
      .mem_clr(tb_mem_clr),
      .mem_init(),
      .mem_dump(tb_mem_dump),
      .verbose(1'b1),
      .init_file_number(),
      .dump_file_number(0),
      .start_address(8'b0),
      .last_address(8'b00000011),
      // Memory interface signals
      .read_enable(),
      .write_enable(tb_w_en),
      .address(tb_w_addr),
      .data(tb_bidir_data2)
      );
   
   AES_Chip aes
     (.SCK(tb_SCK), .n_rst(tb_n_rst), .start(tb_start), .rec_fin(tb_rec_fin), .usr_key(tb_usr_key), .usr_addr(tb_usr_addr), .usr_loc(tb_usr_loc), .mode(tb_mode), .r_data(tb_r_data), .w_data(tb_w_data),.r_addr(tb_r_addr), .w_addr(tb_w_addr), .r_en(tb_r_en), .w_en(tb_w_en), .done(tb_done));

    //CLK signal
   always
     begin : CLK_GEN
	tb_SCK = 1'b0;
	#(CLK_PERIOD / 2);
	tb_SCK = 1'b1;
	#(CLK_PERIOD / 2);
     end
   initial
     begin : TEST_BENCH
	//Initialize SRAM1 and clear SRAM2
	@(posedge tb_SCK);
	tb_mem_clr = 1'b1;
	@(posedge tb_SCK);
	tb_mem_clr = 1'b0;
	@(posedge tb_SCK);
	tb_mem_init = 1'b1;
	
	
	//Initialize all of the test inputs
	tb_n_rst = 1'b1;
	tb_start = 1'b0;
	tb_rec_fin = 1'b0;
	tb_usr_key = 128'b0;
	tb_usr_addr = 8'b0;
	tb_usr_loc = 8'b0;     
	tb_mode = 1'b1;
	
	// Power-on Reset of the AES_Chip
	#(0.1);
	tb_n_rst = 1'b0; // Need to actually toggle this in order for it to actually run dependent always blocks
	#(CLK_PERIOD * 2.25); // Release the reset away from a clock edge
	tb_n_rst = 1'b1; // Deactivate the chip reset
	// Wait for a while to see normal operation
	#(CLK_PERIOD);

	//Test begin
	@(posedge tb_SCK);
	tb_start = 1'b1;
	#(CLK_PERIOD);
	@(posedge tb_SCK);
	tb_rec_fin = 1'b1;
	tb_usr_key = 128'b1;
	tb_s_addr = 8'b0;
	tb_loc = 8'b00000011;
	tb_mode = 1'b0;
	#(100 * CLK_PERIOD);
	tb_mem_dump = 1'b1;
	@()
	
     end
   
endmodule
